<?xml version="1.0" encoding="UTF-8" ?>
<!--XML문서 버전과 인코딩 선언-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--ㅡMybatis 매퍼 DTD(Document Type Definition)지정-->
<mapper namespace="spring.spring_boot_mybatis.mapper.UserMapper">

    <!--XML 기반의 Mybatis 매퍼 사용-->
    <!--select 태그
        id : UserMapper interface method이름과 일치(id속성의 값으로 쿼리를 식별하여 호출
        resultType : 쿼리에 전달되는 매핑할 객체의 타입 지정
        parameterType: 쿼리에 전달되는 파라미터 타입 지정(ex.long, String, 특정 클래스명)
        -->
    <select id="findAll" resultType="spring.spring_boot_mybatis.domain.User">
        SELECT * FROM users
    </select>

    <select id="findById" parameterType="long" resultType="spring.spring_boot_mybatis.domain.User">
        SELECT * FROM users where id = #{id}
    </select>

    <!--insert태그
        id:UserMapper 인터페이스 메서드 이름 일치
        parameterType : 삽입할 객체의 타입 지정
        useGeneratedKeys : DB에서 자동생성된 키를 사용할지 여부 결정
                    (true: 자동생성된 키를 가져옴(auto_increment ,false)
        keyProperty : 자동생성된 키 값을 저장할 파라미터 객체의 속성명 지정
    -->
    <insert id="insert" parameterType="spring.spring_boot_mybatis.domain.User"
        useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users(username, email) values(#{username}, #{email})
    </insert>

    <!--update태그
        id:UserMapper : 인터페이스의 메서드 이름 일치
        parameterType: 업데이트할 객체의 타입 지정
        -->
    <update id="update" parameterType="spring.spring_boot_mybatis.domain.User">
        Update users SET username = #{username}, email = #{email} WHERE id = #{id}
    </update>

    <!--delete
      id:UserMapper : 인터페이스의 메서드 이름 일치
      parameterType: 삭제할 조건(where절)사용될 파라미터의 타입 지정
      -->
    <delete id="delete" parameterType="spring.spring_boot_mybatis.domain.User">
        DELETE FROM users WHERE id = #{id}
    </delete>
</mapper>